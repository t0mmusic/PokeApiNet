// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokeApiNet.Data;

#nullable disable

namespace PokeApiNet.Data.Migrations
{
    [DbContext(typeof(PokeApiDbContext))]
    partial class PokeApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokeApiNet.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMainSeries")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("PokeApiNet.AbilityEffectChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("MoveId");

                    b.ToTable("AbilityEffectChanges");
                });

            modelBuilder.Entity("PokeApiNet.AbilityFlavorText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<string>("FlavorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityFlavorTexts");
                });

            modelBuilder.Entity("PokeApiNet.AbilityPokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityPokemons");
                });

            modelBuilder.Entity("PokeApiNet.AwesomeNames", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AwesomeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AwesomeNames");
                });

            modelBuilder.Entity("PokeApiNet.Berry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GrowthTime")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHarvest")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NaturalGiftPower")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Smoothness")
                        .HasColumnType("integer");

                    b.Property<int>("SoilDryness")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Berries");
                });

            modelBuilder.Entity("PokeApiNet.BerryFirmness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BerryFirmnesses");
                });

            modelBuilder.Entity("PokeApiNet.BerryFlavor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BerryFlavors");
                });

            modelBuilder.Entity("PokeApiNet.BerryFlavorMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BerryId")
                        .HasColumnType("integer");

                    b.Property<int>("Potency")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BerryId");

                    b.ToTable("BerryFlavorMaps");
                });

            modelBuilder.Entity("PokeApiNet.ChainLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChainLinkId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBaby")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChainLinkId");

                    b.ToTable("ChainLinks");
                });

            modelBuilder.Entity("PokeApiNet.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GeneModulo")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<int>>("PossibleValues")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("PokeApiNet.ContestComboDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ContestComboDetails");
                });

            modelBuilder.Entity("PokeApiNet.ContestComboSets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("NormalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SuperId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalId");

                    b.HasIndex("SuperId");

                    b.ToTable("ContestComboSets");
                });

            modelBuilder.Entity("PokeApiNet.ContestEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Appeal")
                        .HasColumnType("integer");

                    b.Property<int>("Jam")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContestEffects");
                });

            modelBuilder.Entity("PokeApiNet.ContestName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ContestTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestTypeId");

                    b.ToTable("ContestNames");
                });

            modelBuilder.Entity("PokeApiNet.ContestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContestTypes");
                });

            modelBuilder.Entity("PokeApiNet.Descriptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GrowthRateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveDamageClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveLearnMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveTargetId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokedexId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("GrowthRateId");

                    b.HasIndex("ItemAttributeId");

                    b.HasIndex("MoveCategoryId");

                    b.HasIndex("MoveDamageClassId");

                    b.HasIndex("MoveLearnMethodId");

                    b.HasIndex("MoveTargetId");

                    b.HasIndex("PokedexId");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("PokeApiNet.Effects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AbilityEffectChangeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ContestEffectId")
                        .HasColumnType("integer");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ItemFlingEffectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbilityEffectChangeId");

                    b.HasIndex("ContestEffectId");

                    b.HasIndex("ItemFlingEffectId");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("PokeApiNet.EggGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EggGroups");
                });

            modelBuilder.Entity("PokeApiNet.Encounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VersionEncounterDetailId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VersionEncounterDetailId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("PokeApiNet.EncounterCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncounterConditions");
                });

            modelBuilder.Entity("PokeApiNet.EncounterConditionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncounterConditionValues");
                });

            modelBuilder.Entity("PokeApiNet.EncounterMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EncounterMethods");
                });

            modelBuilder.Entity("PokeApiNet.EncounterMethodRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("LocationAreaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationAreaId");

                    b.ToTable("EncounterMethodRates");
                });

            modelBuilder.Entity("PokeApiNet.EncounterVersionDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EncounterMethodRateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EncounterMethodRateId");

                    b.ToTable("EncounterVersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChainId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChainId");

                    b.ToTable("EvolutionChains");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChainLinkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAffection")
                        .HasColumnType("integer");

                    b.Property<int?>("MinBeauty")
                        .HasColumnType("integer");

                    b.Property<int?>("MinHappiness")
                        .HasColumnType("integer");

                    b.Property<int?>("MinLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("NeedsOverworldRain")
                        .HasColumnType("boolean");

                    b.Property<int?>("RelativePhysicalStats")
                        .HasColumnType("integer");

                    b.Property<string>("TimeOfDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TurnUpsideDown")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChainLinkId");

                    b.ToTable("EvolutionDetails");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionTrigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvolutionTriggers");
                });

            modelBuilder.Entity("PokeApiNet.FlavorBerryMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BerryFlavorId")
                        .HasColumnType("integer");

                    b.Property<int>("Potency")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BerryFlavorId");

                    b.ToTable("FlavorBerryMaps");
                });

            modelBuilder.Entity("PokeApiNet.FlavorTexts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ContestEffectId")
                        .HasColumnType("integer");

                    b.Property<string>("FlavorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SuperContestEffectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestEffectId");

                    b.HasIndex("SuperContestEffectId");

                    b.ToTable("FlavorTexts");
                });

            modelBuilder.Entity("PokeApiNet.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("PokeApiNet.Generation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("PokeApiNet.GenerationGameIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("GameIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeId");

                    b.ToTable("GenerationGameIndexes");
                });

            modelBuilder.Entity("PokeApiNet.Genuses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("Genuses");
                });

            modelBuilder.Entity("PokeApiNet.GrowthRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GrowthRates");
                });

            modelBuilder.Entity("PokeApiNet.GrowthRateExperienceLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int?>("GrowthRateId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GrowthRateId");

                    b.ToTable("GrowthRateExperienceLevels");
                });

            modelBuilder.Entity("PokeApiNet.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int?>("FlingPower")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpritesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpritesId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PokeApiNet.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("PokeApiNet.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("PokeApiNet.ItemFlingEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemFlingEffects");
                });

            modelBuilder.Entity("PokeApiNet.ItemHolderPokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemHolderPokemon");
                });

            modelBuilder.Entity("PokeApiNet.ItemHolderPokemonVersionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItemHolderPokemonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemHolderPokemonId");

                    b.ToTable("ItemHolderPokemonVersionDetail");
                });

            modelBuilder.Entity("PokeApiNet.ItemPocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemPockets");
                });

            modelBuilder.Entity("PokeApiNet.ItemSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Default")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemSprites");
                });

            modelBuilder.Entity("PokeApiNet.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso3166")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Iso639")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Official")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PokeApiNet.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PokeApiNet.LocationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocationAreas");
                });

            modelBuilder.Entity("PokeApiNet.LocationAreaEncounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("LocationAreaEncounters");
                });

            modelBuilder.Entity("PokeApiNet.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("PokeApiNet.MachineVersionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MoveId");

                    b.ToTable("MachineVersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestCombosId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EffectChance")
                        .HasColumnType("integer");

                    b.Property<Guid>("MetaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Power")
                        .HasColumnType("integer");

                    b.Property<int?>("Pp")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContestCombosId");

                    b.HasIndex("MetaId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("PokeApiNet.MoveAilment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveAilments");
                });

            modelBuilder.Entity("PokeApiNet.MoveBattleStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveBattleStyles");
                });

            modelBuilder.Entity("PokeApiNet.MoveBattleStylePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("HighHpPreference")
                        .HasColumnType("integer");

                    b.Property<int>("LowHpPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("NatureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NatureId");

                    b.ToTable("MoveBattleStylePreferences");
                });

            modelBuilder.Entity("PokeApiNet.MoveCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveCategories");
                });

            modelBuilder.Entity("PokeApiNet.MoveDamageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveDamageClasses");
                });

            modelBuilder.Entity("PokeApiNet.MoveFlavorText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FlavorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("MoveFlavorTexts");
                });

            modelBuilder.Entity("PokeApiNet.MoveLearnMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveLearnMethods");
                });

            modelBuilder.Entity("PokeApiNet.MoveMetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AilmentChance")
                        .HasColumnType("integer");

                    b.Property<int>("CritRate")
                        .HasColumnType("integer");

                    b.Property<int>("Drain")
                        .HasColumnType("integer");

                    b.Property<int>("FlinchChance")
                        .HasColumnType("integer");

                    b.Property<int>("Healing")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxHits")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxTurns")
                        .HasColumnType("integer");

                    b.Property<int?>("MinHits")
                        .HasColumnType("integer");

                    b.Property<int?>("MinTurns")
                        .HasColumnType("integer");

                    b.Property<int>("StatChance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MoveMetaData");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatAffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Change")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DecreaseSetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IncreaseSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DecreaseSetId");

                    b.HasIndex("IncreaseSetId");

                    b.ToTable("MoveStatAffects");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatAffectSets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("MoveStatAffectSets");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Change")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("MoveStatChanges");
                });

            modelBuilder.Entity("PokeApiNet.MoveTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoveTargets");
                });

            modelBuilder.Entity("PokeApiNet.Names", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("BerryFirmnessId")
                        .HasColumnType("integer");

                    b.Property<int?>("BerryFlavorId")
                        .HasColumnType("integer");

                    b.Property<int?>("EggGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("EncounterConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("EncounterConditionValueId")
                        .HasColumnType("integer");

                    b.Property<int?>("EncounterMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("EvolutionTriggerId")
                        .HasColumnType("integer");

                    b.Property<int?>("GenerationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemPocketId")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationAreaId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveAilmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveBattleStyleId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveDamageClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveLearnMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveTargetId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("PalParkAreaId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokeathlonStatId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokedexId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonColorId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonFormFormNamesId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("BerryFirmnessId");

                    b.HasIndex("BerryFlavorId");

                    b.HasIndex("EggGroupId");

                    b.HasIndex("EncounterConditionId");

                    b.HasIndex("EncounterConditionValueId");

                    b.HasIndex("EncounterMethodId");

                    b.HasIndex("EvolutionTriggerId");

                    b.HasIndex("GenerationId");

                    b.HasIndex("ItemAttributeId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPocketId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationAreaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MoveAilmentId");

                    b.HasIndex("MoveBattleStyleId");

                    b.HasIndex("MoveDamageClassId");

                    b.HasIndex("MoveId");

                    b.HasIndex("MoveLearnMethodId");

                    b.HasIndex("MoveTargetId");

                    b.HasIndex("NatureId");

                    b.HasIndex("PalParkAreaId");

                    b.HasIndex("PokeathlonStatId");

                    b.HasIndex("PokedexId");

                    b.HasIndex("PokemonColorId");

                    b.HasIndex("PokemonFormFormNamesId");

                    b.HasIndex("PokemonFormId");

                    b.HasIndex("PokemonSpeciesId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StatId");

                    b.HasIndex("TypeId");

                    b.HasIndex("VersionId");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("PokeApiNet.Nature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Natures");
                });

            modelBuilder.Entity("PokeApiNet.NaturePokeathlonStatAffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DecreaseSetId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IncreaseSetId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxChange")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DecreaseSetId");

                    b.HasIndex("IncreaseSetId");

                    b.ToTable("NaturePokeathlonStatAffects");
                });

            modelBuilder.Entity("PokeApiNet.NaturePokeathlonStatAffectSets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NaturePokeathlonStatAffectSets");
                });

            modelBuilder.Entity("PokeApiNet.NatureStatAffectSets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("NatureStatAffectSets");
                });

            modelBuilder.Entity("PokeApiNet.NatureStatChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MaxChange")
                        .HasColumnType("integer");

                    b.Property<int?>("NatureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NatureId");

                    b.ToTable("NatureStatChanges");
                });

            modelBuilder.Entity("PokeApiNet.PalParkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PalParkAreas");
                });

            modelBuilder.Entity("PokeApiNet.PalParkEncounterArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseScore")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PalParkEncounterAreas");
                });

            modelBuilder.Entity("PokeApiNet.PalParkEncounterSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseScore")
                        .HasColumnType("integer");

                    b.Property<int?>("PalParkAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PalParkAreaId");

                    b.ToTable("PalParkEncounterSpecies");
                });

            modelBuilder.Entity("PokeApiNet.PastMoveStatValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<int?>("EffectChance")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.Property<int?>("Power")
                        .HasColumnType("integer");

                    b.Property<int?>("Pp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("PastMoveStatValues");
                });

            modelBuilder.Entity("PokeApiNet.PokeathlonStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AffectingNaturesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AffectingNaturesId");

                    b.ToTable("PokeathlonStats");
                });

            modelBuilder.Entity("PokeApiNet.Pokedex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMainSeries")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pokedexes");
                });

            modelBuilder.Entity("PokeApiNet.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseExperience")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationAreaEncounters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpritesId")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpritesId");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokeApiNet.PokemonAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonAbilities");
                });

            modelBuilder.Entity("PokeApiNet.PokemonColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PokemonColors");
                });

            modelBuilder.Entity("PokeApiNet.PokemonEncounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("LocationAreaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationAreaId");

                    b.ToTable("PokemonEncounters");
                });

            modelBuilder.Entity("PokeApiNet.PokemonEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EntryNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PokedexId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokedexId");

                    b.ToTable("PokemonEntries");
                });

            modelBuilder.Entity("PokeApiNet.PokemonForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBattleOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMega")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpritesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpritesId");

                    b.ToTable("PokemonForms");
                });

            modelBuilder.Entity("PokeApiNet.PokemonFormSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PokemonFormSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonHeldItems");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItemVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PokemonHeldItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonHeldItemId");

                    b.ToTable("PokemonHeldItemVersions");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonMove");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMoveVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LevelLearnedAt")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PokemonMoveId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PokemonMoveId");

                    b.ToTable("PokemonMoveVersion");
                });

            modelBuilder.Entity("PokeApiNet.PokemonPastTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonPastTypes");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseHappiness")
                        .HasColumnType("integer");

                    b.Property<int?>("CaptureRate")
                        .HasColumnType("integer");

                    b.Property<bool>("FormsSwitchable")
                        .HasColumnType("boolean");

                    b.Property<int>("GenderRate")
                        .HasColumnType("integer");

                    b.Property<bool>("HasGenderDifferences")
                        .HasColumnType("boolean");

                    b.Property<int?>("HatchCounter")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBaby")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLegendary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMythical")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PokemonSpecies");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesDexEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EntryNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonSpeciesDexEntries");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesFlavorTexts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FlavorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonSpeciesFlavorTexts");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("PokemonSpeciesGenders");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesVariety", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int?>("PokemonSpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonSpeciesVarieties");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OtherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OtherId");

                    b.HasIndex("VersionsId");

                    b.ToTable("PokemonSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+OtherSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DreamWorldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OfficialArtworkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DreamWorldId");

                    b.HasIndex("HomeId");

                    b.HasIndex("OfficialArtworkId");

                    b.ToTable("OtherSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+OtherSprites+DreamWorldSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DreamWorldSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+OtherSprites+HomeSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HomeSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+OtherSprites+OfficialArtworkSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OfficialArtworkSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationIIIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationIIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationIVId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationVIIIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationVIIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationVIId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenerationVId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GenerationIIIId");

                    b.HasIndex("GenerationIIId");

                    b.HasIndex("GenerationIId");

                    b.HasIndex("GenerationIVId");

                    b.HasIndex("GenerationVIIIId");

                    b.HasIndex("GenerationVIIId");

                    b.HasIndex("GenerationVIId");

                    b.HasIndex("GenerationVId");

                    b.ToTable("VersionSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmeraldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FireredLeafgreenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RubySapphireId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmeraldId");

                    b.HasIndex("FireredLeafgreenId");

                    b.HasIndex("RubySapphireId");

                    b.ToTable("GenerationIIISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+EmeraldSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmeraldSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+FireredLeafgreenSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FireredLeafgreenSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+RubySapphireSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RubySapphireSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CrystalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SilverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CrystalId");

                    b.HasIndex("GoldId");

                    b.HasIndex("SilverId");

                    b.ToTable("GenerationIISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+CrystalSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CrystalSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+GoldSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GoldSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+SilverSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SilverSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RedBlueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YellowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RedBlueId");

                    b.HasIndex("YellowId");

                    b.ToTable("GenerationISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites+RedBlueSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackGray")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontGray")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RedBlueSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites+YellowSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackGray")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontGray")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontTransparent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YellowSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiamondPearlId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HeartGoldSoulSilverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatinumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiamondPearlId");

                    b.HasIndex("HeartGoldSoulSilverId");

                    b.HasIndex("PlatinumId");

                    b.ToTable("GenerationIVSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+DiamondPearlSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiamondPearlSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+HeartGoldSoulSilverSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HeartGoldSoulSilverSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+PlatinumSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlatinumSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIIISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IconsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IconsId");

                    b.ToTable("GenerationVIIISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIIISprites+IconsSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IconsSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IconsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UltraSunUltraMoonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IconsId");

                    b.HasIndex("UltraSunUltraMoonId");

                    b.ToTable("GenerationVIISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites+GenVIIIconsSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GenVIIIconsSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites+UltraSunUltraMoonSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UltraSunUltraMoonSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OmegaRubyAlphaSapphireId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("XYId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OmegaRubyAlphaSapphireId");

                    b.HasIndex("XYId");

                    b.ToTable("GenerationVISprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites+OmegaRubyAlphaSapphireSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OmegaRubyAlphaSapphireSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites+XYSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("XYSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlackWhiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlackWhiteId");

                    b.ToTable("GenerationVSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites+BlackWhiteSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimatedId")
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnimatedId");

                    b.ToTable("BlackWhiteSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites+BlackWhiteSprites+AnimatedSprites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontDefault")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShiny")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontShinyFemale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnimatedSprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseStat")
                        .HasColumnType("integer");

                    b.Property<int>("Effort")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonStats");
                });

            modelBuilder.Entity("PokeApiNet.PokemonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("PokemonFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PokemonPastTypesId")
                        .HasColumnType("uuid");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFormId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("PokemonPastTypesId");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("PokeApiNet.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("PokeApiNet.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AffectingMovesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AffectingNaturesId")
                        .HasColumnType("uuid");

                    b.Property<int>("GameIndex")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBattleOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AffectingMovesId");

                    b.HasIndex("AffectingNaturesId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("PokeApiNet.SuperContestEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Appeal")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SuperContestEffects");
                });

            modelBuilder.Entity("PokeApiNet.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DamageRelationsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DamageRelationsId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PokeApiNet.TypePokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TypesPokemon");
                });

            modelBuilder.Entity("PokeApiNet.TypeRelations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TypeRelations");
                });

            modelBuilder.Entity("PokeApiNet.VerboseEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PastMoveStatValuesId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PastMoveStatValuesId");

                    b.ToTable("VerboseEffects");
                });

            modelBuilder.Entity("PokeApiNet.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("PokeApiNet.VersionEncounterDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationAreaEncounterId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxChance")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PokemonEncounterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationAreaEncounterId");

                    b.HasIndex("PokemonEncounterId");

                    b.ToTable("VersionEncounterDetails");
                });

            modelBuilder.Entity("PokeApiNet.VersionGameIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("GameIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("VersionGameIndexes");
                });

            modelBuilder.Entity("PokeApiNet.VersionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VersionGroups");
                });

            modelBuilder.Entity("PokeApiNet.VersionGroupFlavorText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("VersionGroupFlavorTexts");
                });

            modelBuilder.Entity("PokeApiNet.AbilityEffectChange", b =>
                {
                    b.HasOne("PokeApiNet.Ability", null)
                        .WithMany("EffectChanges")
                        .HasForeignKey("AbilityId");

                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("EffectChanges")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("PokeApiNet.AbilityFlavorText", b =>
                {
                    b.HasOne("PokeApiNet.Ability", null)
                        .WithMany("FlavorTextEntries")
                        .HasForeignKey("AbilityId");
                });

            modelBuilder.Entity("PokeApiNet.AbilityPokemon", b =>
                {
                    b.HasOne("PokeApiNet.Ability", null)
                        .WithMany("Pokemon")
                        .HasForeignKey("AbilityId");
                });

            modelBuilder.Entity("PokeApiNet.BerryFlavorMap", b =>
                {
                    b.HasOne("PokeApiNet.Berry", null)
                        .WithMany("Flavors")
                        .HasForeignKey("BerryId");
                });

            modelBuilder.Entity("PokeApiNet.ChainLink", b =>
                {
                    b.HasOne("PokeApiNet.ChainLink", null)
                        .WithMany("EvolvesTo")
                        .HasForeignKey("ChainLinkId");
                });

            modelBuilder.Entity("PokeApiNet.ContestComboSets", b =>
                {
                    b.HasOne("PokeApiNet.ContestComboDetail", "Normal")
                        .WithMany()
                        .HasForeignKey("NormalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.ContestComboDetail", "Super")
                        .WithMany()
                        .HasForeignKey("SuperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Normal");

                    b.Navigation("Super");
                });

            modelBuilder.Entity("PokeApiNet.ContestName", b =>
                {
                    b.HasOne("PokeApiNet.ContestType", null)
                        .WithMany("Names")
                        .HasForeignKey("ContestTypeId");
                });

            modelBuilder.Entity("PokeApiNet.Descriptions", b =>
                {
                    b.HasOne("PokeApiNet.Characteristic", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("CharacteristicId");

                    b.HasOne("PokeApiNet.GrowthRate", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("GrowthRateId");

                    b.HasOne("PokeApiNet.ItemAttribute", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("ItemAttributeId");

                    b.HasOne("PokeApiNet.MoveCategory", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("MoveCategoryId");

                    b.HasOne("PokeApiNet.MoveDamageClass", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("MoveDamageClassId");

                    b.HasOne("PokeApiNet.MoveLearnMethod", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("MoveLearnMethodId");

                    b.HasOne("PokeApiNet.MoveTarget", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("MoveTargetId");

                    b.HasOne("PokeApiNet.Pokedex", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("PokedexId");

                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("FormDescriptions")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.Effects", b =>
                {
                    b.HasOne("PokeApiNet.AbilityEffectChange", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("AbilityEffectChangeId");

                    b.HasOne("PokeApiNet.ContestEffect", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("ContestEffectId");

                    b.HasOne("PokeApiNet.ItemFlingEffect", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("ItemFlingEffectId");
                });

            modelBuilder.Entity("PokeApiNet.Encounter", b =>
                {
                    b.HasOne("PokeApiNet.VersionEncounterDetail", null)
                        .WithMany("EncounterDetails")
                        .HasForeignKey("VersionEncounterDetailId");
                });

            modelBuilder.Entity("PokeApiNet.EncounterMethodRate", b =>
                {
                    b.HasOne("PokeApiNet.LocationArea", null)
                        .WithMany("EncounterMethodRates")
                        .HasForeignKey("LocationAreaId");
                });

            modelBuilder.Entity("PokeApiNet.EncounterVersionDetails", b =>
                {
                    b.HasOne("PokeApiNet.EncounterMethodRate", null)
                        .WithMany("VersionDetails")
                        .HasForeignKey("EncounterMethodRateId");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionChain", b =>
                {
                    b.HasOne("PokeApiNet.ChainLink", "Chain")
                        .WithMany()
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionDetail", b =>
                {
                    b.HasOne("PokeApiNet.ChainLink", null)
                        .WithMany("EvolutionDetails")
                        .HasForeignKey("ChainLinkId");
                });

            modelBuilder.Entity("PokeApiNet.FlavorBerryMap", b =>
                {
                    b.HasOne("PokeApiNet.BerryFlavor", null)
                        .WithMany("Berries")
                        .HasForeignKey("BerryFlavorId");
                });

            modelBuilder.Entity("PokeApiNet.FlavorTexts", b =>
                {
                    b.HasOne("PokeApiNet.ContestEffect", null)
                        .WithMany("FlavorTextEntries")
                        .HasForeignKey("ContestEffectId");

                    b.HasOne("PokeApiNet.SuperContestEffect", null)
                        .WithMany("FlavorTextEntries")
                        .HasForeignKey("SuperContestEffectId");
                });

            modelBuilder.Entity("PokeApiNet.GenerationGameIndex", b =>
                {
                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("GameIndices")
                        .HasForeignKey("ItemId");

                    b.HasOne("PokeApiNet.Location", null)
                        .WithMany("GameIndices")
                        .HasForeignKey("LocationId");

                    b.HasOne("PokeApiNet.Type", null)
                        .WithMany("GameIndices")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("PokeApiNet.Genuses", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("Genera")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.GrowthRateExperienceLevel", b =>
                {
                    b.HasOne("PokeApiNet.GrowthRate", null)
                        .WithMany("Levels")
                        .HasForeignKey("GrowthRateId");
                });

            modelBuilder.Entity("PokeApiNet.Item", b =>
                {
                    b.HasOne("PokeApiNet.ItemSprites", "Sprites")
                        .WithMany()
                        .HasForeignKey("SpritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprites");
                });

            modelBuilder.Entity("PokeApiNet.ItemHolderPokemon", b =>
                {
                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("HeldByPokemon")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("PokeApiNet.ItemHolderPokemonVersionDetail", b =>
                {
                    b.HasOne("PokeApiNet.ItemHolderPokemon", null)
                        .WithMany("VersionDetails")
                        .HasForeignKey("ItemHolderPokemonId");
                });

            modelBuilder.Entity("PokeApiNet.MachineVersionDetail", b =>
                {
                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("Machines")
                        .HasForeignKey("ItemId");

                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("Machines")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("PokeApiNet.Move", b =>
                {
                    b.HasOne("PokeApiNet.ContestComboSets", "ContestCombos")
                        .WithMany()
                        .HasForeignKey("ContestCombosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.MoveMetaData", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestCombos");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("PokeApiNet.MoveBattleStylePreference", b =>
                {
                    b.HasOne("PokeApiNet.Nature", null)
                        .WithMany("MoveBattleStylePreferences")
                        .HasForeignKey("NatureId");
                });

            modelBuilder.Entity("PokeApiNet.MoveFlavorText", b =>
                {
                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("FlavorTextEntries")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatAffect", b =>
                {
                    b.HasOne("PokeApiNet.MoveStatAffectSets", "DecreaseSet")
                        .WithMany("Decrease")
                        .HasForeignKey("DecreaseSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeApiNet.MoveStatAffectSets", "IncreaseSet")
                        .WithMany("Increase")
                        .HasForeignKey("IncreaseSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DecreaseSet");

                    b.Navigation("IncreaseSet");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatChange", b =>
                {
                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("StatChanges")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("PokeApiNet.Names", b =>
                {
                    b.HasOne("PokeApiNet.Ability", null)
                        .WithMany("Names")
                        .HasForeignKey("AbilityId");

                    b.HasOne("PokeApiNet.BerryFirmness", null)
                        .WithMany("Names")
                        .HasForeignKey("BerryFirmnessId");

                    b.HasOne("PokeApiNet.BerryFlavor", null)
                        .WithMany("Names")
                        .HasForeignKey("BerryFlavorId");

                    b.HasOne("PokeApiNet.EggGroup", null)
                        .WithMany("Names")
                        .HasForeignKey("EggGroupId");

                    b.HasOne("PokeApiNet.EncounterCondition", null)
                        .WithMany("Names")
                        .HasForeignKey("EncounterConditionId");

                    b.HasOne("PokeApiNet.EncounterConditionValue", null)
                        .WithMany("Names")
                        .HasForeignKey("EncounterConditionValueId");

                    b.HasOne("PokeApiNet.EncounterMethod", null)
                        .WithMany("Names")
                        .HasForeignKey("EncounterMethodId");

                    b.HasOne("PokeApiNet.EvolutionTrigger", null)
                        .WithMany("Names")
                        .HasForeignKey("EvolutionTriggerId");

                    b.HasOne("PokeApiNet.Generation", null)
                        .WithMany("Names")
                        .HasForeignKey("GenerationId");

                    b.HasOne("PokeApiNet.ItemAttribute", null)
                        .WithMany("Names")
                        .HasForeignKey("ItemAttributeId");

                    b.HasOne("PokeApiNet.ItemCategory", null)
                        .WithMany("Names")
                        .HasForeignKey("ItemCategoryId");

                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("Names")
                        .HasForeignKey("ItemId");

                    b.HasOne("PokeApiNet.ItemPocket", null)
                        .WithMany("Names")
                        .HasForeignKey("ItemPocketId");

                    b.HasOne("PokeApiNet.Language", null)
                        .WithMany("Names")
                        .HasForeignKey("LanguageId");

                    b.HasOne("PokeApiNet.LocationArea", null)
                        .WithMany("Names")
                        .HasForeignKey("LocationAreaId");

                    b.HasOne("PokeApiNet.Location", null)
                        .WithMany("Names")
                        .HasForeignKey("LocationId");

                    b.HasOne("PokeApiNet.MoveAilment", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveAilmentId");

                    b.HasOne("PokeApiNet.MoveBattleStyle", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveBattleStyleId");

                    b.HasOne("PokeApiNet.MoveDamageClass", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveDamageClassId");

                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveId");

                    b.HasOne("PokeApiNet.MoveLearnMethod", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveLearnMethodId");

                    b.HasOne("PokeApiNet.MoveTarget", null)
                        .WithMany("Names")
                        .HasForeignKey("MoveTargetId");

                    b.HasOne("PokeApiNet.Nature", null)
                        .WithMany("Names")
                        .HasForeignKey("NatureId");

                    b.HasOne("PokeApiNet.PalParkArea", null)
                        .WithMany("Names")
                        .HasForeignKey("PalParkAreaId");

                    b.HasOne("PokeApiNet.PokeathlonStat", null)
                        .WithMany("Names")
                        .HasForeignKey("PokeathlonStatId");

                    b.HasOne("PokeApiNet.Pokedex", null)
                        .WithMany("Names")
                        .HasForeignKey("PokedexId");

                    b.HasOne("PokeApiNet.PokemonColor", null)
                        .WithMany("Names")
                        .HasForeignKey("PokemonColorId");

                    b.HasOne("PokeApiNet.PokemonForm", null)
                        .WithMany("FormNames")
                        .HasForeignKey("PokemonFormFormNamesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeApiNet.PokemonForm", null)
                        .WithMany("Names")
                        .HasForeignKey("PokemonFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("Names")
                        .HasForeignKey("PokemonSpeciesId");

                    b.HasOne("PokeApiNet.Region", null)
                        .WithMany("Names")
                        .HasForeignKey("RegionId");

                    b.HasOne("PokeApiNet.Stat", null)
                        .WithMany("Names")
                        .HasForeignKey("StatId");

                    b.HasOne("PokeApiNet.Type", null)
                        .WithMany("Names")
                        .HasForeignKey("TypeId");

                    b.HasOne("PokeApiNet.Version", null)
                        .WithMany("Names")
                        .HasForeignKey("VersionId");
                });

            modelBuilder.Entity("PokeApiNet.NaturePokeathlonStatAffect", b =>
                {
                    b.HasOne("PokeApiNet.NaturePokeathlonStatAffectSets", "DecreaseSet")
                        .WithMany("Decrease")
                        .HasForeignKey("DecreaseSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeApiNet.NaturePokeathlonStatAffectSets", "IncreaseSet")
                        .WithMany("Increase")
                        .HasForeignKey("IncreaseSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_NaturePokeathlonStatAffects_NaturePokeathlonStatAffectSets~1");

                    b.Navigation("DecreaseSet");

                    b.Navigation("IncreaseSet");
                });

            modelBuilder.Entity("PokeApiNet.NatureStatChange", b =>
                {
                    b.HasOne("PokeApiNet.Nature", null)
                        .WithMany("PokeathlonStatChanges")
                        .HasForeignKey("NatureId");
                });

            modelBuilder.Entity("PokeApiNet.PalParkEncounterArea", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("PalParkEncounters")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.PalParkEncounterSpecies", b =>
                {
                    b.HasOne("PokeApiNet.PalParkArea", null)
                        .WithMany("PokemonEncounters")
                        .HasForeignKey("PalParkAreaId");
                });

            modelBuilder.Entity("PokeApiNet.PastMoveStatValues", b =>
                {
                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("PastValues")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("PokeApiNet.PokeathlonStat", b =>
                {
                    b.HasOne("PokeApiNet.NaturePokeathlonStatAffectSets", "AffectingNatures")
                        .WithMany()
                        .HasForeignKey("AffectingNaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffectingNatures");
                });

            modelBuilder.Entity("PokeApiNet.Pokemon", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites", "Sprites")
                        .WithMany()
                        .HasForeignKey("SpritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonAbility", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("Abilities")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonEncounter", b =>
                {
                    b.HasOne("PokeApiNet.LocationArea", null)
                        .WithMany("PokemonEncounters")
                        .HasForeignKey("LocationAreaId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonEntry", b =>
                {
                    b.HasOne("PokeApiNet.Pokedex", null)
                        .WithMany("PokemonEntries")
                        .HasForeignKey("PokedexId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonForm", b =>
                {
                    b.HasOne("PokeApiNet.PokemonFormSprites", "Sprites")
                        .WithMany()
                        .HasForeignKey("SpritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprites");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItem", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("HeldItems")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItemVersion", b =>
                {
                    b.HasOne("PokeApiNet.PokemonHeldItem", null)
                        .WithMany("VersionDetails")
                        .HasForeignKey("PokemonHeldItemId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMove", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("Moves")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMoveVersion", b =>
                {
                    b.HasOne("PokeApiNet.PokemonMove", null)
                        .WithMany("VersionGroupDetails")
                        .HasForeignKey("PokemonMoveId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonPastTypes", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("PastTypes")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesDexEntry", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("PokedexNumbers")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesFlavorTexts", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("FlavorTextEntries")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesGender", b =>
                {
                    b.HasOne("PokeApiNet.Gender", null)
                        .WithMany("PokemonSpeciesDetails")
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpeciesVariety", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSpecies", null)
                        .WithMany("Varieties")
                        .HasForeignKey("PokemonSpeciesId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+OtherSprites", "Other")
                        .WithMany()
                        .HasForeignKey("OtherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites", "Versions")
                        .WithMany()
                        .HasForeignKey("VersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Other");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+OtherSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+OtherSprites+DreamWorldSprites", "DreamWorld")
                        .WithMany()
                        .HasForeignKey("DreamWorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+OtherSprites+HomeSprites", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+OtherSprites+OfficialArtworkSprites", "OfficialArtwork")
                        .WithMany()
                        .HasForeignKey("OfficialArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DreamWorld");

                    b.Navigation("Home");

                    b.Navigation("OfficialArtwork");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites", "GenerationIII")
                        .WithMany()
                        .HasForeignKey("GenerationIIIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites", "GenerationII")
                        .WithMany()
                        .HasForeignKey("GenerationIIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites", "GenerationI")
                        .WithMany()
                        .HasForeignKey("GenerationIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites", "GenerationIV")
                        .WithMany()
                        .HasForeignKey("GenerationIVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIIISprites", "GenerationVIII")
                        .WithMany()
                        .HasForeignKey("GenerationVIIIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites", "GenerationVII")
                        .WithMany()
                        .HasForeignKey("GenerationVIIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites", "GenerationVI")
                        .WithMany()
                        .HasForeignKey("GenerationVIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites", "GenerationV")
                        .WithMany()
                        .HasForeignKey("GenerationVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerationI");

                    b.Navigation("GenerationII");

                    b.Navigation("GenerationIII");

                    b.Navigation("GenerationIV");

                    b.Navigation("GenerationV");

                    b.Navigation("GenerationVI");

                    b.Navigation("GenerationVII");

                    b.Navigation("GenerationVIII");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+EmeraldSprites", "Emerald")
                        .WithMany()
                        .HasForeignKey("EmeraldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+FireredLeafgreenSprites", "FireredLeafgreen")
                        .WithMany()
                        .HasForeignKey("FireredLeafgreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIIISprites+RubySapphireSprites", "RubySapphire")
                        .WithMany()
                        .HasForeignKey("RubySapphireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emerald");

                    b.Navigation("FireredLeafgreen");

                    b.Navigation("RubySapphire");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+CrystalSprites", "Crystal")
                        .WithMany()
                        .HasForeignKey("CrystalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+GoldSprites", "Gold")
                        .WithMany()
                        .HasForeignKey("GoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIISprites+SilverSprites", "Silver")
                        .WithMany()
                        .HasForeignKey("SilverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crystal");

                    b.Navigation("Gold");

                    b.Navigation("Silver");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites+RedBlueSprites", "RedBlue")
                        .WithMany()
                        .HasForeignKey("RedBlueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationISprites+YellowSprites", "Yellow")
                        .WithMany()
                        .HasForeignKey("YellowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RedBlue");

                    b.Navigation("Yellow");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+DiamondPearlSprites", "DiamondPearl")
                        .WithMany()
                        .HasForeignKey("DiamondPearlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+HeartGoldSoulSilverSprites", "HeartGoldSoulSilver")
                        .WithMany()
                        .HasForeignKey("HeartGoldSoulSilverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationIVSprites+PlatinumSprites", "Platinum")
                        .WithMany()
                        .HasForeignKey("PlatinumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiamondPearl");

                    b.Navigation("HeartGoldSoulSilver");

                    b.Navigation("Platinum");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIIISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIIISprites+IconsSprites", "Icons")
                        .WithMany()
                        .HasForeignKey("IconsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icons");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites+GenVIIIconsSprites", "Icons")
                        .WithMany()
                        .HasForeignKey("IconsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVIISprites+UltraSunUltraMoonSprites", "UltraSunUltraMoon")
                        .WithMany()
                        .HasForeignKey("UltraSunUltraMoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icons");

                    b.Navigation("UltraSunUltraMoon");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites+OmegaRubyAlphaSapphireSprites", "OmegaRubyAlphaSapphire")
                        .WithMany()
                        .HasForeignKey("OmegaRubyAlphaSapphireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVISprites+XYSprites", "XY")
                        .WithMany()
                        .HasForeignKey("XYId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OmegaRubyAlphaSapphire");

                    b.Navigation("XY");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites+BlackWhiteSprites", "BlackWhite")
                        .WithMany()
                        .HasForeignKey("BlackWhiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlackWhite");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites+BlackWhiteSprites", b =>
                {
                    b.HasOne("PokeApiNet.PokemonSprites+VersionSprites+GenerationVSprites+BlackWhiteSprites+AnimatedSprites", "Animated")
                        .WithMany()
                        .HasForeignKey("AnimatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animated");
                });

            modelBuilder.Entity("PokeApiNet.PokemonStat", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("Stats")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.PokemonType", b =>
                {
                    b.HasOne("PokeApiNet.PokemonForm", null)
                        .WithMany("Types")
                        .HasForeignKey("PokemonFormId");

                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("Types")
                        .HasForeignKey("PokemonId");

                    b.HasOne("PokeApiNet.PokemonPastTypes", null)
                        .WithMany("Types")
                        .HasForeignKey("PokemonPastTypesId");
                });

            modelBuilder.Entity("PokeApiNet.Stat", b =>
                {
                    b.HasOne("PokeApiNet.MoveStatAffectSets", "AffectingMoves")
                        .WithMany()
                        .HasForeignKey("AffectingMovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeApiNet.NatureStatAffectSets", "AffectingNatures")
                        .WithMany()
                        .HasForeignKey("AffectingNaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffectingMoves");

                    b.Navigation("AffectingNatures");
                });

            modelBuilder.Entity("PokeApiNet.Type", b =>
                {
                    b.HasOne("PokeApiNet.TypeRelations", "DamageRelations")
                        .WithMany()
                        .HasForeignKey("DamageRelationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageRelations");
                });

            modelBuilder.Entity("PokeApiNet.TypePokemon", b =>
                {
                    b.HasOne("PokeApiNet.Type", null)
                        .WithMany("Pokemon")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("PokeApiNet.VerboseEffect", b =>
                {
                    b.HasOne("PokeApiNet.Ability", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("AbilityId");

                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("ItemId");

                    b.HasOne("PokeApiNet.Move", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("MoveId");

                    b.HasOne("PokeApiNet.PastMoveStatValues", null)
                        .WithMany("EffectEntries")
                        .HasForeignKey("PastMoveStatValuesId");
                });

            modelBuilder.Entity("PokeApiNet.VersionEncounterDetail", b =>
                {
                    b.HasOne("PokeApiNet.LocationAreaEncounter", null)
                        .WithMany("VersionDetails")
                        .HasForeignKey("LocationAreaEncounterId");

                    b.HasOne("PokeApiNet.PokemonEncounter", null)
                        .WithMany("VersionDetails")
                        .HasForeignKey("PokemonEncounterId");
                });

            modelBuilder.Entity("PokeApiNet.VersionGameIndex", b =>
                {
                    b.HasOne("PokeApiNet.Pokemon", null)
                        .WithMany("GameIndicies")
                        .HasForeignKey("PokemonId");
                });

            modelBuilder.Entity("PokeApiNet.VersionGroupFlavorText", b =>
                {
                    b.HasOne("PokeApiNet.Item", null)
                        .WithMany("FlavorGroupTextEntries")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("PokeApiNet.Ability", b =>
                {
                    b.Navigation("EffectChanges");

                    b.Navigation("EffectEntries");

                    b.Navigation("FlavorTextEntries");

                    b.Navigation("Names");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeApiNet.AbilityEffectChange", b =>
                {
                    b.Navigation("EffectEntries");
                });

            modelBuilder.Entity("PokeApiNet.Berry", b =>
                {
                    b.Navigation("Flavors");
                });

            modelBuilder.Entity("PokeApiNet.BerryFirmness", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.BerryFlavor", b =>
                {
                    b.Navigation("Berries");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.ChainLink", b =>
                {
                    b.Navigation("EvolutionDetails");

                    b.Navigation("EvolvesTo");
                });

            modelBuilder.Entity("PokeApiNet.Characteristic", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("PokeApiNet.ContestEffect", b =>
                {
                    b.Navigation("EffectEntries");

                    b.Navigation("FlavorTextEntries");
                });

            modelBuilder.Entity("PokeApiNet.ContestType", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.EggGroup", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.EncounterCondition", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.EncounterConditionValue", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.EncounterMethod", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.EncounterMethodRate", b =>
                {
                    b.Navigation("VersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.EvolutionTrigger", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Gender", b =>
                {
                    b.Navigation("PokemonSpeciesDetails");
                });

            modelBuilder.Entity("PokeApiNet.Generation", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.GrowthRate", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("PokeApiNet.Item", b =>
                {
                    b.Navigation("EffectEntries");

                    b.Navigation("FlavorGroupTextEntries");

                    b.Navigation("GameIndices");

                    b.Navigation("HeldByPokemon");

                    b.Navigation("Machines");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.ItemAttribute", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.ItemCategory", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.ItemFlingEffect", b =>
                {
                    b.Navigation("EffectEntries");
                });

            modelBuilder.Entity("PokeApiNet.ItemHolderPokemon", b =>
                {
                    b.Navigation("VersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.ItemPocket", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Language", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Location", b =>
                {
                    b.Navigation("GameIndices");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.LocationArea", b =>
                {
                    b.Navigation("EncounterMethodRates");

                    b.Navigation("Names");

                    b.Navigation("PokemonEncounters");
                });

            modelBuilder.Entity("PokeApiNet.LocationAreaEncounter", b =>
                {
                    b.Navigation("VersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.Move", b =>
                {
                    b.Navigation("EffectChanges");

                    b.Navigation("EffectEntries");

                    b.Navigation("FlavorTextEntries");

                    b.Navigation("Machines");

                    b.Navigation("Names");

                    b.Navigation("PastValues");

                    b.Navigation("StatChanges");
                });

            modelBuilder.Entity("PokeApiNet.MoveAilment", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.MoveBattleStyle", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.MoveCategory", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("PokeApiNet.MoveDamageClass", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.MoveLearnMethod", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.MoveStatAffectSets", b =>
                {
                    b.Navigation("Decrease");

                    b.Navigation("Increase");
                });

            modelBuilder.Entity("PokeApiNet.MoveTarget", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Nature", b =>
                {
                    b.Navigation("MoveBattleStylePreferences");

                    b.Navigation("Names");

                    b.Navigation("PokeathlonStatChanges");
                });

            modelBuilder.Entity("PokeApiNet.NaturePokeathlonStatAffectSets", b =>
                {
                    b.Navigation("Decrease");

                    b.Navigation("Increase");
                });

            modelBuilder.Entity("PokeApiNet.PalParkArea", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("PokemonEncounters");
                });

            modelBuilder.Entity("PokeApiNet.PastMoveStatValues", b =>
                {
                    b.Navigation("EffectEntries");
                });

            modelBuilder.Entity("PokeApiNet.PokeathlonStat", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Pokedex", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Names");

                    b.Navigation("PokemonEntries");
                });

            modelBuilder.Entity("PokeApiNet.Pokemon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("GameIndicies");

                    b.Navigation("HeldItems");

                    b.Navigation("Moves");

                    b.Navigation("PastTypes");

                    b.Navigation("Stats");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("PokeApiNet.PokemonColor", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.PokemonEncounter", b =>
                {
                    b.Navigation("VersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.PokemonForm", b =>
                {
                    b.Navigation("FormNames");

                    b.Navigation("Names");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItem", b =>
                {
                    b.Navigation("VersionDetails");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMove", b =>
                {
                    b.Navigation("VersionGroupDetails");
                });

            modelBuilder.Entity("PokeApiNet.PokemonPastTypes", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("PokeApiNet.PokemonSpecies", b =>
                {
                    b.Navigation("FlavorTextEntries");

                    b.Navigation("FormDescriptions");

                    b.Navigation("Genera");

                    b.Navigation("Names");

                    b.Navigation("PalParkEncounters");

                    b.Navigation("PokedexNumbers");

                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("PokeApiNet.Region", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.Stat", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.SuperContestEffect", b =>
                {
                    b.Navigation("FlavorTextEntries");
                });

            modelBuilder.Entity("PokeApiNet.Type", b =>
                {
                    b.Navigation("GameIndices");

                    b.Navigation("Names");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeApiNet.Version", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("PokeApiNet.VersionEncounterDetail", b =>
                {
                    b.Navigation("EncounterDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
